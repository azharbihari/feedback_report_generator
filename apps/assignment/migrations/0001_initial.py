# Generated by Django 5.2.1 on 2025-05-10 15:38

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ReportTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(db_index=True, help_text='Unique identifier for the task.', max_length=255, unique=True, verbose_name='Task ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('STARTED', 'Started'), ('SUCCESS', 'Success'), ('FAILURE', 'Failure'), ('RETRY', 'Retry'), ('REVOKED', 'Revoked')], db_index=True, default='PENDING', help_text='The current status of the report generation task.', max_length=20, verbose_name='Task Status')),
                ('report_type', models.CharField(choices=[('html', 'HTML'), ('pdf', 'PDF')], db_index=True, default='html', help_text='The type of the report being generated (either HTML or PDF).', max_length=10, verbose_name='Report Type')),
                ('error_message', models.TextField(blank=True, help_text='Optional error message if task fails.', null=True, verbose_name='Error Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the task was created.', verbose_name='Creation Time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the task status was last updated.', verbose_name='Last Updated Time')),
            ],
            options={
                'verbose_name': 'Report Generation Task',
                'verbose_name_plural': 'Report Generation Tasks',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'report_type'], name='assignment__status_3c608e_idx')],
            },
        ),
        migrations.CreateModel(
            name='GeneratedReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the report.', primary_key=True, serialize=False, verbose_name='Report ID')),
                ('student_id', models.CharField(db_index=True, help_text='The unique ID of the student.', max_length=255, verbose_name='Student ID')),
                ('namespace', models.CharField(db_index=True, help_text='The namespace associated with the report.', max_length=255, verbose_name='Namespace')),
                ('content', models.BinaryField(blank=True, help_text='Binary content of the report (e.g., PDF or HTML as bytes), compressed using zlib.', null=True, verbose_name='Report Content')),
                ('content_type', models.CharField(choices=[('html', 'HTML'), ('pdf', 'PDF')], db_index=True, help_text='The type of content in the report, either HTML or PDF.', max_length=10, verbose_name='Report Type')),
                ('generated_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the report was generated.', verbose_name='Generated Time')),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='Size of the compressed report content in bytes.', null=True, verbose_name='Compressed Size (bytes)')),
                ('report_task', models.ForeignKey(help_text='The report task this report is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to='assignment.reporttask', verbose_name='Related Task')),
            ],
            options={
                'verbose_name': 'Generated Report',
                'verbose_name_plural': 'Generated Reports',
                'ordering': ['-generated_at'],
                'indexes': [models.Index(fields=['student_id'], name='assignment__student_28dd8d_idx'), models.Index(fields=['namespace'], name='assignment__namespa_55cd6a_idx'), models.Index(fields=['report_task', 'content_type'], name='assignment__report__d8166c_idx'), models.Index(fields=['student_id', 'namespace'], name='assignment__student_bd21d7_idx')],
            },
        ),
    ]
